diff --git a/libupnpp/device/device.cxx b/libupnpp/device/device.cxx
index f97af21..d7c30ff 100644
--- a/libupnpp/device/device.cxx
+++ b/libupnpp/device/device.cxx
@@ -67,7 +67,7 @@ static bool vectorstoargslists(const vector<string>& names,
 static const int expiretime = 3600;
 
 UpnpDevice::UpnpDevice(const string& deviceId, 
-                       const unordered_map<string, string>& xmlfiles)
+                       const unordered_map<string, VDirContent>& files)
     : m_deviceId(deviceId), m_needExit(false), m_evloopcond(PTHREAD_COND_INITIALIZER)
 {
     //LOGDEB("UpnpDevice::UpnpDevice(" << m_deviceId << ")" << endl);
@@ -101,18 +101,18 @@ UpnpDevice::UpnpDevice(const string& deviceId,
         return;
     }
 
-    unordered_map<string,string>::const_iterator it = 
-        xmlfiles.find("description.xml");
-    if (it == xmlfiles.end()) {
+    unordered_map<string, VDirContent>::const_iterator it = 
+        files.find("description.xml");
+    if (it == files.end()) {
         LOGFAT("UpnpDevice::UpnpDevice: no description.xml found in xmlfiles"
                << endl);
         return;
     } 
 
-    const string& description = it->second;
+    const string& description = it->second.content;
 
-    for (it = xmlfiles.begin(); it != xmlfiles.end(); it++) {
-        theVD->addFile("/", it->first, it->second, "application/xml");
+    for (it = files.begin(); it != files.end(); it++) {
+        theVD->addFile("/", it->first, it->second.content, it->second.mimetype);
     }
 
     // Start up the web server for sending out description files
diff --git a/libupnpp/device/device.hxx b/libupnpp/device/device.hxx
index a28f0f8..ebb55eb 100644
--- a/libupnpp/device/device.hxx
+++ b/libupnpp/device/device.hxx
@@ -35,13 +35,30 @@ namespace UPnPProvider {
 
 typedef std::function<int (const UPnPP::SoapArgs&, UPnPP::SoapData&)> soapfun;
 
+// Definition of a virtual directory entry: data and mime type
+struct VDirContent {
+    VDirContent(const std::string& ct, const std::string& mt)
+        : content(ct), mimetype(mt) {}
+    std::string content;
+    std::string mimetype;
+};
+
 /** Define a virtual interface to link libupnp operations to a device 
  * implementation 
  */
 class UpnpDevice {
 public:
+    /** Construct device object
+     * @param deviceId uuid for device: "uuid:UUIDvalue"
+     * @param files list of name/content pairs to be added to the
+     *   virtual directory root. The file names must match the SCDPURL
+     *   values for the services in the description.xml document. Note that 
+     *   this will have to be changed if we ever want to really
+     *   support multiple devices (will need to use subdirectories or
+     *   find another way to avoid name conflicts).
+     */
     UpnpDevice(const std::string& deviceId, 
-               const std::unordered_map<std::string, std::string>& xmlfiles);
+               const std::unordered_map<std::string, VDirContent>& files);
     ~UpnpDevice();
 
     void addService(UpnpService *, const std::string& serviceId);
diff --git a/libupnpp/upnpplib.cxx b/libupnpp/upnpplib.cxx
index 45d024e..50f6068 100644
--- a/libupnpp/upnpplib.cxx
+++ b/libupnpp/upnpplib.cxx
@@ -130,7 +130,7 @@ int LibUPnP::setupWebServer(const string& description, UpnpDevice_Handle *dvh)
         UPNPREG_BUF_DESC,
         description.c_str(), 
         description.size(), /* Desc filename len, ignored */
-        1, /* URLBase*/
+        1, /* config_baseURL */
         o_callback, (void *)this, dvh);
 
     if (res != UPNP_E_SUCCESS) {
diff --git a/upmpd/description.xml b/upmpd/description.xml
index c72d78f..622c4d6 100644
--- a/upmpd/description.xml
+++ b/upmpd/description.xml
@@ -13,8 +13,9 @@
     <modelName>UpMPD</modelName>
     <modelNumber>1.0</modelNumber>
     <modelURL>http://www.github.com/medoc92/upmpd</modelURL>
-    <serialNumber>72</serialNumber>
+    <serialNumber>42</serialNumber>
     <UDN>uuid:@UUID@</UDN>
+    @ICONLIST@
     <serviceList>
       <service>
         <serviceType>urn:schemas-upnp-org:service:RenderingControl:1</serviceType>
diff --git a/upmpd/upmpd.cxx b/upmpd/upmpd.cxx
index 669d2b6..2961f21 100644
--- a/upmpd/upmpd.cxx
+++ b/upmpd/upmpd.cxx
@@ -79,10 +79,22 @@ static void setupsigs()
 
 // Note: if we ever need this to work without cxx11, there is this:
 // http://www.tutok.sk/fastgl/callback.html
+//
+// Note that there is a problem in the order in which we do things
+// here: because the UpnpDevice() constructor starts the
+// advertisements and publishes the description document before the
+// services are actually initialized, it is possible that a fast
+// client will fail in subscribing to events, which will manifest
+// itself on the server side by error messages like the following in
+// the log:
+//   libupnpp/device/device.cxx:183::UpnpDevice: Bad serviceID: 
+//        urn:upnp-org:serviceId:ConnectionManager
+// The solution would be to have a separate init call to start the
+// device at the end of the constructor code.
 UpMpd::UpMpd(const string& deviceid, const string& friendlyname,
-             const unordered_map<string, string>& xmlfiles,
+             const unordered_map<string, VDirContent>& files,
              MPDCli *mpdcli, unsigned int opts, const string& cachefn)
-    : UpnpDevice(deviceid, xmlfiles), m_mpdcli(mpdcli), m_mpds(0),
+    : UpnpDevice(deviceid, files), m_mpdcli(mpdcli), m_mpds(0),
       m_options(opts),
       m_mcachefn(cachefn)
 {
@@ -163,6 +175,18 @@ static const string ohDesc(
     "</service>"
     );
 
+static const string iconDesc(
+    "<iconList>"
+    "  <icon>"
+    "    <mimetype>image/png</mimetype>"
+    "    <width>64</width>"
+    "    <height>64</height>"
+    "    <depth>32</depth>"
+    "    <url>/icon.png</url>"
+    "  </icon>"
+    "</iconList>"
+    );
+
 static char *thisprog;
 
 static int op_flags;
@@ -294,6 +318,7 @@ int main(int argc, char *argv[])
     if (argc != 0)
         Usage();
 
+    string iconpath;
     if (!configfile.empty()) {
         ConfSimple config(configfile.c_str(), 1, true);
         if (!config.ok()) {
@@ -322,6 +347,7 @@ int main(int argc, char *argv[])
         if (config.get("ohmetapersist", value)) {
             ohmetapersist = atoi(value.c_str()) != 0;
         }
+        config.get("iconpath", iconpath);
         if (!(op_flags & OPT_i)) {
             config.get("upnpiface", iface);
             if (iface.empty()) {
@@ -472,9 +498,17 @@ int main(int argc, char *argv[])
             return 1;
         }
     }
-            
+
     string reason;
-    unordered_map<string, string> xmlfiles;
+
+    string icondata;
+    if (!iconpath.empty()) {
+        if (!file_to_string(iconpath, icondata, &reason)) {
+            LOGERR("Failed reading " << iconpath << " : " << reason << endl);
+        }
+    }
+
+    unordered_map<string, VDirContent> files;
     for (unsigned int i = 0; i < xmlfilenames.size(); i++) {
         string filename = path_cat(datadir, xmlfilenames[i]);
         string data;
@@ -488,9 +522,22 @@ int main(int argc, char *argv[])
             data = regsub1("@FRIENDLYNAME@", data, friendlyname);
             if (openhome) 
                 data = regsub1("@OPENHOME@", data, ohDesc);
+            else 
+                data = regsub1("@OPENHOME@", data, "");
+            if (!icondata.empty())
+                data = regsub1("@ICONLIST@", data, iconDesc);
+            else
+                data = regsub1("@ICONLIST@", data, "");
         }
-        xmlfiles[xmlfilenames[i]] = data;
+        files.insert(pair<string, VDirContent>
+                     (xmlfilenames[i], VDirContent(data, "application/xml")));
     }
+
+    if (!icondata.empty()) {
+        files.insert(pair<string, VDirContent>
+                     ("icon.png", VDirContent(icondata, "image/png")));
+    }
+
     unsigned int options = UpMpd::upmpdNone;
     if (ownqueue)
         options |= UpMpd::upmpdOwnQueue;
@@ -501,7 +548,7 @@ int main(int argc, char *argv[])
 
     // Initialize the UPnP device object.
     UpMpd device(string("uuid:") + UUID, friendlyname, 
-                 xmlfiles, mpdclip, options, mcfn);
+                 files, mpdclip, options, mcfn);
     dev = &device;
 
     // And forever generate state change events.
diff --git a/upmpd/upmpd.hxx b/upmpd/upmpd.hxx
index f1bb9af..4d2c790 100644
--- a/upmpd/upmpd.hxx
+++ b/upmpd/upmpd.hxx
@@ -29,7 +29,7 @@ class MpdStatus;
 
 using namespace UPnPProvider;
 
-// The UPnP MPD frontend device with its 3 services
+// The UPnP MPD frontend device with its services
 class UpMpd : public UpnpDevice {
 public:
     friend class UpMpdRenderCtl;
@@ -49,7 +49,7 @@ public:
         upmpdOhMetaPersist = 4
     };
     UpMpd(const std::string& deviceid, const std::string& friendlyname,
-          const std::unordered_map<std::string, std::string>& xmlfiles,
+          const std::unordered_map<std::string, VDirContent>& files,
           MPDCli *mpdcli, unsigned int opts, const std::string& cachefn);
     ~UpMpd();
 
